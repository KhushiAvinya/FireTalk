@using FireTalk.Models
@using FireTalk.Services
@page "/Profile"
@using MudBlazor
@inject IFireTalkService FireTalkService
@inject AppState appState
@inject IDialogService DialogService

<MudPaper Class="d-flex justify-center align-center"
          Style="background-color:#f2f4f7; min-height:89vh; padding:16px;">
    <MudCard Class="p-6 rounded-xl shadow-lg" Style="width:100%; max-width:500px; position:relative;">
        @if (user != null)
        {
            <div style="position:relative;">
                <MudImage Src="@((user.ProfilePictureUrl != null) ? user.ProfilePictureUrl : "https://picsum.photos/600/200")"
                          Alt="Cover"
                          Style="width:100%; height:200px; object-fit:cover; border-top-left-radius:12px; border-top-right-radius:12px;" />
                <MudAvatar Size="Size.Large" Class="elevation-4" Color="Color.Primary"
                           Style="position:absolute; bottom:-50px; left:50%; transform:translateX(-50%); border:3px solid white;">
                    @(!string.IsNullOrWhiteSpace(user.Name) ? GetInitials(user.Name) : "U")
                </MudAvatar>
            </div>

            <MudCardContent Class="mt-6 pt-6 text-center">
                <MudText Typo="Typo.h5" Class="fw-bold">@user.Name</MudText>
                <MudText Typo="Typo.subtitle2" Color="Color.Secondary">@user.Email</MudText>
                <MudDivider Class="my-3" />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit"
                           OnClick="@OpenEditProfile">
                    Edit Profile
                </MudButton>
            </MudCardContent>
        }
        else
        {
            <MudText Typo="Typo.h6" Align="Align.Center">Loading profile...</MudText>
        }
    </MudCard>
</MudPaper>

@code {
    private UserModel? user;
    private string editName = "";
    private string editEmail = "";
    private string? editProfilePicture = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (appState.CurrentUser != null)
            {
                user = await FireTalkService.GetUserByIdAsync(appState.CurrentUser.Id);
                if (user != null)
                {
                    editName = user.Name;
                    editEmail = user.Email;
                    editProfilePicture = user.ProfilePictureUrl;
                }
                StateHasChanged();
            }
        }
    }

    private async Task OpenEditProfile()
{
    if (user != null)
    {
        var parameters = new DialogParameters { ["User"] = user };
        var options = new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = DialogService.Show<EditProfileDialog>("Edit Profile", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is UserModel updatedUser)
        {

            user = updatedUser;
            appState.CurrentUser = updatedUser;

            await FireTalkService.UpdateUserAsync(updatedUser);
            StateHasChanged(); 
        }
    }
}


    private string GetInitials(string name)
    {
        var parts = name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        return string.Join("", parts.Select(p => p[0])).ToUpperInvariant();
    }
}
