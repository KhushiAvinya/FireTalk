@page "/Home"
@using FireTalk.Components.Layout
@using FireTalk.Models
@using FireTalk.Services
@using Google.Cloud.Firestore
@using MudBlazor
@inject IDialogService DialogService
@inject IFireTalkService fireTalkService
@inject FireStoreService fireStoreService
@inject NavigationManager navigationManager
@inject AppState appState
@inject IJSRuntime JS
@inject ISnackbar Snackbar
<style>
    .group-card {
        cursor: pointer;
        transition: all 0.2s ease-in-out;
        border-radius: 10px;
    }

        .group-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

    .truncate {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .font-semibold {
        font-weight: 600;
    }
</style>

<div style="position:fixed;bottom:24px;right:24px;z-index:9999">
    <MudFab StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" OnClick="@OnCreateMessage" />
</div>

<MudStack>
    @if (isLoading)
    {
        <div style="height:100vh; display:flex; justify-content:center; align-items:center;">
            <MudStack Spacing="0" AlignItems="AlignItems.Center">
                <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" Class="my-5" />
                <MudText Typo="Typo.body2">Loading...</MudText>
            </MudStack>
        </div>
    }

   @foreach (var group in _groups.OrderByDescending(g => g.LastSentTime))
{
        <MudCard Class="my-2 group-card"
                 @onclick="() => OnMessageGroupClick(group)">

        <MudRipple /> 
        <MudCardContent>
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                <MudAvatar Size="Size.Medium" Color="Color.Primary">
                    @group.Title?.Substring(0, 1).ToUpper()
                </MudAvatar>

                <MudStack Spacing="0">
                    <MudText Typo="Typo.subtitle1" Class="font-semibold">@group.Title</MudText>
                    <MudText Typo="Typo.body2" Class="text-gray-600 truncate"
                             Style="max-width: 220px;">
                        @group.LastSentMessage
                    </MudText>
                </MudStack>

                <MudSpacer />

                <MudStack AlignItems="AlignItems.End" Spacing="0">
                    <MudText Typo="Typo.caption" Class="text-gray-500">
                        @GetWeekDateInfo(group.LastSentTime.ToDateTime())
                    </MudText>

                    @if (group.UnreadCount > 0)
                    {
                        <MudBadge Color="Color.Error"
                                  Content="@group.UnreadCount"
                                  Overlap="true"
                                  Class="mt-1"
                                  Style="font-size:12px;" />
                    }
                </MudStack>
            </MudStack>
        </MudCardContent>
    </MudCard>
}

</MudStack>

@code {
    private List<MessageGroupModel> _groups = new();
    private bool isLoading = false;
    private bool _isDialogOpen = false;
    private List<FirestoreChangeListener> _groupListeners = new();

    protected override async Task OnInitializedAsync()
    {
        await GetUserGroups();
        SubscribeToGroupUpdates();
    }

    private async Task GetUserGroups()
    {
        isLoading = true;
        StateHasChanged();

        var groups = await fireTalkService.GetUserGroups(MainLayout._userInfo.Id);

        if (groups?.Count > 0)
        {
            foreach (var g in groups)
                g.UnreadCount = 0;

            _groups = groups;
        }

        isLoading = false;
        StateHasChanged();
    }

    private void SubscribeToGroupUpdates()
    {
        foreach (var group in _groups)
        {
            var listener = fireStoreService.Db.Collection("chats")
                .WhereEqualTo("GroupId", group.Id)
                .OrderByDescending("CreatedAt")
                .Limit(1)
                .Listen(async snapshot =>
                {
                    foreach (var doc in snapshot.Documents)
                    {
                        var chat = doc.ConvertTo<ChatModel>();
                        var existingGroup = _groups.FirstOrDefault(g => g.Id == group.Id);

                        if (existingGroup != null)
                        {
                            bool isNewMessageFromOtherUser = chat.OwnerId != MainLayout._userInfo.Id;

                            existingGroup.LastSentMessage = chat.Text;
                            existingGroup.LastSentTime = chat.CreatedAt;

                            if (isNewMessageFromOtherUser)
                            {
                                existingGroup.UnreadCount += 1;

                                await InvokeAsync(async () =>
                                {

                                    Snackbar.Add(
                                        $"{existingGroup.Title}: {chat.Text}",
                                        Severity.Info,
                                        config =>
                                        {
                                            config.ShowCloseIcon = true;
                                            config.VisibleStateDuration = 4000;
                                        });


                                    await JS.InvokeVoidAsync("playNotificationSound");

                                    await JS.InvokeVoidAsync("showBrowserNotification", existingGroup.Title, chat.Text);

                                    StateHasChanged();
                                });
                            }


                            await InvokeAsync(StateHasChanged);
                        }
                    }
                });

            _groupListeners.Add(listener);
        }

        _ = JS.InvokeVoidAsync("requestNotificationPermission");
    }

    public static string GetWeekDateInfo(DateTime messageDateTime)
    {
        var localTime = messageDateTime.ToLocalTime();
        var now = DateTime.Now;

        if (localTime.Date == now.Date)
            return localTime.ToString("hh:mm tt");
        else if (localTime.Date == now.AddDays(-1).Date)
            return $"Yesterday {localTime:hh:mm tt}";
        else
            return localTime.ToString("dd MMM yyyy hh:mm tt");
    }

    void OnMessageGroupClick(MessageGroupModel group)
    {
        group.UnreadCount = 0;
        appState.CurrentData = group;
        navigationManager.NavigateTo("/MessagePage");
    }

    async Task OnCreateMessage()
    {
        if (_isDialogOpen) return;
        _isDialogOpen = true;

        var options = new DialogOptions { FullScreen = true, NoHeader = true };
        var dialog = DialogService.Show<CreateMessageGroup>("", options);
        var result = await dialog.Result;

        _isDialogOpen = false;

        if (result.Canceled == false && result.Data is string newGroupId)
        {
            var newGroup = await fireTalkService.GetGroupById(newGroupId);
            if (newGroup != null)
            {
                newGroup.UnreadCount = 0;
                _groups.Insert(0, newGroup);
                StateHasChanged();
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        foreach (var listener in _groupListeners)
        {
            await listener.StopAsync();
        }
    }
}

<script>
    window.playNotificationSound = function () {
        try {
            const audio = new Audio('/sounds/notify.mp3'); 
            audio.volume = 0.7;
            audio.play().catch(err => console.warn('Playback blocked:', err));
        } catch (e) {
            console.error('Error playing sound:', e);
        }
    };

    window.requestNotificationPermission = function () {
        if ("Notification" in window)
            Notification.requestPermission();
    };

    window.showBrowserNotification = function (title, body) {
        if ("Notification" in window && Notification.permission === "granted") {
            new Notification(title, { body });
        }
    };
</script>
