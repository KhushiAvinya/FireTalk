@using FireTalk.Components.Layout
@using FireTalk.Models
@using FireTalk.Services
@using Google.Cloud.Firestore
@inject IFireTalkService FireTalkService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudDialog Style="margin-top:100px;border-radius:10px;z-index:10000">
    <DialogContent>
        <MudStack Spacing="3">
            <!-- 🔹 Header -->
            <MudStack Row="true" AlignItems="AlignItems.Center">
                <MudText Typo="Typo.h6">Create Message Group</MudText>
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="@ClosePopup" />
            </MudStack>

            <!-- 🔹 Form -->
            <MudForm @ref="_mudFormRef">
                <MudTextField @bind-Value="_messageTitle"
                              Label="Group Title"
                              Variant="Variant.Outlined"
                              Required="true"
                              FullWidth="true"
                              Immediate="true" />

                <MudTextField @bind-Value="_messageText"
                              Label="Initial Message"
                              Variant="Variant.Outlined"
                              MaxLines="3"
                              FullWidth="true" />

                <MudSelect T="UserModel"
                           Label="Select Members"
                           @bind-SelectedValues="_selectedMembers"
                           MultiSelection="true"
                           Required="true"
                           Variant="Variant.Outlined"
                           FullWidth="true"
                           ToStringFunc="@(u => u?.Name)">
                    @if (_allUsers.Any())
                    {
                        @foreach (var user in _allUsers)
                        {
                            <MudSelectItem Value="@user">
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                    <MudAvatar Size="Size.Small">@user.Name?.Substring(0, 1).ToUpper()</MudAvatar>
                                    <MudStack Spacing="0">
                                        <MudText Typo="Typo.subtitle2">@user.Name</MudText>
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">@user.Email</MudText>
                                    </MudStack>
                                </MudStack>
                            </MudSelectItem>
                        }
                    }
                    else
                    {
                        <MudSelectItem T="UserModel" Disabled="true">No users found</MudSelectItem>
                    }
                </MudSelect>

                <!-- 🔹 Action Button -->
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           FullWidth="true"
                           Class="mt-4 mb-2"
                           OnClick="@SaveMessageGroup"
                           Disabled="@isLoading">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.Center" Spacing="1">
                        @if (isLoading)
                        {
                            <MudProgressCircular Size="Size.Small" Color="Color.Inherit" />
                            <MudText>Creating...</MudText>
                        }
                        else
                        {
                            <MudText>Create Group</MudText>
                        }
                    </MudStack>
                </MudButton>
            </MudForm>
        </MudStack>
    </DialogContent>
</MudDialog>

@code {
    private string _messageTitle = string.Empty;
    private string _messageText = string.Empty;
    private IEnumerable<UserModel> _selectedMembers = new List<UserModel>();
    private List<UserModel> _allUsers = new();
    private MudForm _mudFormRef;
    private bool isLoading = false;

    [CascadingParameter] 
    private IMudDialogInstance MudDialog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var users = await FireTalkService.GetAllUsers();

            // 🔹 Exclude the current user (optional)
            if (users?.Count > 0)
                _allUsers = users
                    .Where(u => u.Id != MainLayout._userInfo.Id)
                    .ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading users: {ex.Message}", Severity.Error);
        }
    }

    private void ClosePopup() => MudDialog.Cancel();

    private async Task SaveMessageGroup()
    {
        await _mudFormRef.Validate();

        if (!_mudFormRef.IsValid)
            return;

        try
        {
            isLoading = true;

            var memberIds = _selectedMembers?.Select(m => m.Id).ToList() ?? new();
            memberIds.Add(MainLayout._userInfo.Id); // include current user

            var groupId = Guid.NewGuid().ToString();
            var now = DateTime.UtcNow;

            var group = new MessageGroupModel
            {
                Id = groupId,
                Title = _messageTitle,
                LastSentMessage = _messageText,
                CreatedAt = Timestamp.FromDateTime(now),
                LastSentTime = Timestamp.FromDateTime(now),
                Member = memberIds,
                OwnerId = MainLayout._userInfo.Id
            };

            // 🔹 Save group
            var success = await FireTalkService.CreateMessageGroup(group);

            if (!success)
            {
                Snackbar.Add("Failed to create message group.", Severity.Error);
                isLoading = false;
                return;
            }

            // 🔹 Create first chat message
            if (!string.IsNullOrWhiteSpace(_messageText))
            {
                await FireTalkService.CreateChatMessage(new ChatModel
                {
                    Id = Guid.NewGuid().ToString(),
                    GroupId = groupId,
                    OwnerId = MainLayout._userInfo.Id,
                    Text = _messageText,
                    CreatedAt = Timestamp.FromDateTime(now)
                });
            }

            Snackbar.Add("Message group created successfully!", Severity.Success);

            isLoading = false;
            MudDialog.Close(DialogResult.Ok(groupId)); // ✅ return groupId to Home.razor
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error creating group: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }
}
